datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum DiscountType {
  PRODUCT
  CATEGORY
  TAG
  ALL
}

model Discount {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  code      String?      @unique
  type      DiscountType
  ref       String[]
  value     Float
  from      DateTime?
  to        DateTime?
  maxUses   Int?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("discounts")
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  image       String
  tags        String[]
  price       Float
  stock       Int
  sku         String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  String?   @db.ObjectId
  category    Category? @relation(fields: [categoryId], references: [id])

  @@map("products")
}

type CartItem {
  quantity  Int
  productId String
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)
  orders    Order[]
  scope     String[] @default(["user"])

  @@map("users")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

type OrderItem {
  quantity  Int
  productId String
  name      String
  price     Float
  image     String?
  discount  Float?
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model Order {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String?       @db.ObjectId
  user          User?         @relation(fields: [userId], references: [id])
  total         Float
  status        OrderStatus   @default(PENDING)
  discountCode  String?
  paymentStatus PaymentStatus @default(PENDING)
  items         OrderItem[]

  @@map("orders")
}
